from __future__ import annotations
from dataclasses import dataclass
import json

from secrets import token_bytes
from hashlib import sha256
from base64 import urlsafe_b64encode
from requests import request
from urllib.parse import urlencode

from .scope import Scope


BASE = "https://openapi.etsy.com"
CONNECT_URL = "https://www.etsy.com/oauth/connect"
TOKEN_URL = "https://api.etsy.com/v3/public/oauth/token"


def url_safe(data: bytes) -> bytes:
    return urlsafe_b64encode(data).rstrip(b"=")


@dataclass(frozen=True)
class Auth:
    """ Etsy Authentication workflow helper class. """
    keystring: str
    """ Unique Etsy App identifier, can be found at `https://www.etsy.com/developers/your-apps` under 'See API Key Details'. """
    scopes: list[Scope]
    """ List of `Scope` objects representing the permissions of an authentication request. """
    redirect: str
    """ URL to receive the access code provided by a `GET` request from Etsy. For local apps, use the `localhost` module. """

    def setup_auth(self) -> AuthState:
        """
        Build a URL used to authenticate an app with an Etsy account.
        Returns a state including the built URL, the unique `state` bytes, and the `verifier` bytes.
        """

        # The code verifier is a cryptographically random 32 byte sequence.
        # To be URL-safe, it is base64 encoded.
        verifier = url_safe(token_bytes(32))

        # The challenge is the SHA256 hash of the verifier.
        # When asking for an access code, pass the challenge.
        # Then, when asking for a full access token using this code, pass the verifier.
        # Etsy can then SHA256 hash the provided value and ensure it is equal to the challenge.
        # This prevents interception attacks.
        hasher = sha256()
        hasher.update(verifier)
        sha = url_safe(hasher.digest())

        # Non-empty single-use token generated to prevent CSRF attacks.
        state = url_safe(token_bytes(32))

        # Scopes are provided as a space-seperated list.
        scopes = " ".join([s.value for s in self.scopes])

        params = urlencode({
            "response_type": "code",
            "client_id": self.keystring,
            "redirect_uri": self.redirect,
            "scope": scopes,
            "state": state,
            "code_challenge": sha,
            "code_challenge_method": "S256",
        })
        url = f"{CONNECT_URL}?{params}"
        return AuthState(url, verifier, state)

    def _token_request(self, method: str, grant: str, **kwargs: str | bytes) -> dict:
        # Make a request to the `/token` endpoint for generating or refreshing access tokens.
        # The grant type indicates which type of action to perform.
        r = request(
            method,
            TOKEN_URL,
            data={"grant_type": grant, "client_id": self.keystring} | kwargs,
        )
        response = dict(json.loads(r.content.decode("utf-8")))
        if "error" in response:
            raise ValueError(response["error"])
        else:
            return response

    def get_token(self, state: AuthState, auth_code: str) -> AuthTokens:
        """
        Given an `AuthState` and the access code granted by following `state.url`, get Etsy authentication keys. 
        """
        data = self._token_request(
            "POST",
            "authorization_code",
            redirect_uri=self.redirect,
            code=auth_code,
            code_verifier=state.verifier,
        )
        return AuthTokens(data["access_token"], data["refresh_token"])

    def refresh_token(self, token: str) -> AuthTokens:
        """
        Given a refresh token obtained from `Auth.get_token`, exdchange it for new authentication keys.
        """
        data = self._token_request(
            "POST",
            "refresh_token",
            refresh_token=token,
        )
        return AuthTokens(data["access_token"], data["refresh_token"])


@dataclass(frozen=True)
class AuthState:
    """ State held between API requests. """
    auth_url: str
    verifier: bytes
    state: bytes


@dataclass(frozen=True)
class AuthTokens:
    """ Authentication tokens generated by `Auth.get_token`. """
    access: str
    """ Token used to interact with the EtsyV3 API. It expies after 1 hour. """
    refresh: str
    """ Token used to get a new access token without requiring user-confirmation. It can be used for up to 90 days, then the `Auth.setup_auth` workflow must be re-ran. """
